c
array.filter{|v| v > 0}
array.remove(0)
array.compact
array.push(0)
array.push(1)
array
n
c
params
current_user.authenticate_user!
authenticate_user!
authenticate_user
current_user
methods
c
invalid
params
c
self
object
obje
record
invalid
c
object
response
:response
methods
error
invalid
c
current_user
c
n
current_user.books
current_user.book
n
index
n
c
n
c
current_user.books
c
current_user.books
c
n
c
current_user.books.filter{|b| b.id != user_input.book_id}
current_user.books.find(user_input.book_id).delete
current_user.books
current_user.books.delete{|x| x.id == user_input.book_id}
user_input
uI = UserInput.find(params[:id])
current_user.books
params
c
current_user
c
C
c
current_user.id
c
books
n
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
uI
n
c
n
current_user.id
current_user
params
@current_user
c
user
n
current_user.id
current_user
c
user
n
c
render json: user, include: :books
user = User.find(current_user.id)
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
        }, status: :ok
          data: UserSerializer.new(resource).serializable_hash[:data][:attributes]
          status: {code: 200, message: 'Logged in sucessfully.'},
render json: current_user.to_json, {
current_user
c
current_user
c
current_user
c
current_user
current_user.authenticate_user
signed_in?
current_user
c
params
current_user
n
c
current_user
c
current_user
n
c
current_user.to_json
current_user
current_user?
current_user.signed_in?
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
process_token
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
request.headers['Authorization']
c
Rails.application.credentials.devise[:jwt_secret_key]
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key]).first
c
JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key]).first
c
request.headers['Authorization'].split(' ')[1]
(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key])
(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key]).first
c
jwt_payload
n
c
JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key]).first
n
c
JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key])
n
c
request.headers['Authorization'].split(' ')[1]
Rails.application.credentials.devise[:jwt_secret_key]
jwt_payload
n
c
jwt.secret
jwt_secret_key
JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key])
Rails.application.credentials.devise[:jwt_secret_key]
n
c
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key]).first
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1], jwt.secret).first
n
request.headers['Authorization']
c
n
c
jwt.secret
request.headers['Authorization'].split(' ')[1]
request.headers['Authorization']
request.headers
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1], 'b00bc126c6c74c8b33bec59baf17e10a4e8a66b16c2a270227e0617d43b4c727dace0e613223ee71336f611726fd17f0305f4d540fc79537ee0683142b70bc0c').first
n
request.headers['Authorization']
c
signed_in?
c
request.headers['Authorization']
n
c
response_body
performed?
n
c
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1], 'b00bc126c6c74c8b33bec59baf17e10a4e8a66b16c2a270227e0617d43b4c727dace0e613223ee71336f611726fd17f0305f4d540fc79537ee0683142b70bc0c').first
JWT.decode(request.headers['Authorization'].split(' ')[1], 'b00bc126c6c74c8b33bec59baf17e10a4e8a66b16c2a270227e0617d43b4c727dace0e613223ee71336f611726fd17f0305f4d540fc79537ee0683142b70bc0c').first
JWT.decode(request.headers['Authorization'].split(' ')[1], 'b00bc126c6c74c8b33bec59baf17e10a4e8a66b16c2a270227e0617d43b4c727dace0e613223ee71336f611726fd17f0305f4d540fc79537ee0683142b70bc0c')
JWT.decode(request.headers['Authorization'].split(' ')[1])
JWT.decode(request.headers['Authorization'].split(' ')[1]
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.secrets.secret_key_base).first
request.headers['Authorization']
c
n
@current_user ||= super || User.find_by_email(params[:email])
c
ENV['RAILS-SECRET-KEY']
c
ENV['RAILS-SECRET-KEY']
c
ENV['RAILS-SECRET-KEY']
c
ENV['RAILS-SECRET-KEY']
jwt.secret = ENV['RAILS-SECRET-KEY']
c
ENV['RAILS-SECRET-KEY']
jwt.secret = ENV['RAILS-SECRET-KEY']
jwt.secret
jwt.secret = ENV['RAILS-SECRET-KEY']
