c
request
request.jwt
request
jwt
user
signed_in?
c
n
c
current_user
JWT.methods
JWT
request
c
response.status
response
super
n
payload
n
signed_in?
n
c
user
@current_user
c
@current_user
c
signed_in?
c
user.id
authenticate_user!
authenticate_user
@current_user
super
user
signed_in?
c
n
exit
c
super.merge
super
warden
request.headers['Authorization'].split(' ')[1].remove('"')
jwt_payload
user_id
user
token
jwt
methods
token
user
session
sessions[:id]
c
request
JWT.decode(request.headers['Authorization'].split(' ')[1])
JWT.decode(request.headers['Authorization'].split(' ')[1]
        #                          Rails.application.credentials.devise[:jwt_secret_key]).first
JWT.decode(request.headers['Authorization'].split(' ')[1],
JWT
JWT.decode(request.headers['Authorization'].split(' ')[1].remove('"'), Rails.application.secrets.secret_key_base).first
get_user_from_token
jwt_payload
@current_user_id
c
n
c
n
c
n
c
User.find(params[:id])
n
c
n
c
n
m
n
all
rails
super
params
token
User.find(@current_user_id)
@current_user
n
c
exit
end
token ? "y" : "n"
token === true
token?
token.to_json
token
render json: token
n
user.valid_password?(params[:password])
user.valid_password?
n
user
c
n
token
n
user
c
sign_in_params
params
User.find_by_email("example@example.com")
user
c
params
payload
n
c
n
c
current_user
resource
_opts
resource.persisted?
resource
register_success
resource
params
n
c
params
q
c
params[:password]
params[:id]
c
params
params[:id]
params=[:id]
params
c
n
params[:password]
params
self
email
exit
@user.errors
@user
user
self
errors
q!
request.headers['Authorization']
request.headers('Authorization')
request.headers
request
JWT
c
n
c
session
c
session
c
n
c
current_user
c
current_user
c
params
_resource
_opts
c
q!
Q!
C
_resource
c
n
q!
                                 Rails.application.credentials.devise[:jwt_secret_key]).firstc
JWT.decode(request.headers['Authorization'].split(' ')[1],
JWT.decode(request.headers)
JWT.decode
JWT
c
_resource
q!
_opts
_resource
q!
JWT.decode(request.headers['Authorization'])
q!
JWT.decode(request.headers['Authorization'])
c
n
c
n
JWT.decode(request.headers['Authorization'])
c
JWT.decode(request.headers['Authorization'])
JWT.decode(request.headers['Authorization']
c
n
JWT
