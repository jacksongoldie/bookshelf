c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
process_token
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
request.headers['Authorization']
c
Rails.application.credentials.devise[:jwt_secret_key]
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key]).first
c
JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key]).first
c
request.headers['Authorization'].split(' ')[1]
(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key])
(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key]).first
c
jwt_payload
n
c
JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key]).first
n
c
JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key])
n
c
request.headers['Authorization'].split(' ')[1]
Rails.application.credentials.devise[:jwt_secret_key]
jwt_payload
n
c
jwt.secret
jwt_secret_key
JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key])
Rails.application.credentials.devise[:jwt_secret_key]
n
c
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.credentials.devise[:jwt_secret_key]).first
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1], jwt.secret).first
n
request.headers['Authorization']
c
n
c
jwt.secret
request.headers['Authorization'].split(' ')[1]
request.headers['Authorization']
request.headers
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1], 'b00bc126c6c74c8b33bec59baf17e10a4e8a66b16c2a270227e0617d43b4c727dace0e613223ee71336f611726fd17f0305f4d540fc79537ee0683142b70bc0c').first
n
request.headers['Authorization']
c
signed_in?
c
request.headers['Authorization']
n
c
response_body
performed?
n
c
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1], 'b00bc126c6c74c8b33bec59baf17e10a4e8a66b16c2a270227e0617d43b4c727dace0e613223ee71336f611726fd17f0305f4d540fc79537ee0683142b70bc0c').first
JWT.decode(request.headers['Authorization'].split(' ')[1], 'b00bc126c6c74c8b33bec59baf17e10a4e8a66b16c2a270227e0617d43b4c727dace0e613223ee71336f611726fd17f0305f4d540fc79537ee0683142b70bc0c').first
JWT.decode(request.headers['Authorization'].split(' ')[1], 'b00bc126c6c74c8b33bec59baf17e10a4e8a66b16c2a270227e0617d43b4c727dace0e613223ee71336f611726fd17f0305f4d540fc79537ee0683142b70bc0c')
JWT.decode(request.headers['Authorization'].split(' ')[1])
JWT.decode(request.headers['Authorization'].split(' ')[1]
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.secrets.secret_key_base).first
request.headers['Authorization']
c
n
@current_user ||= super || User.find_by_email(params[:email])
c
ENV['RAILS-SECRET-KEY']
c
ENV['RAILS-SECRET-KEY']
c
ENV['RAILS-SECRET-KEY']
c
ENV['RAILS-SECRET-KEY']
jwt.secret = ENV['RAILS-SECRET-KEY']
c
ENV['RAILS-SECRET-KEY']
jwt.secret = ENV['RAILS-SECRET-KEY']
jwt.secret
jwt.secret = ENV['RAILS-SECRET-KEY']
wt.secret = ENV['RAILS-SECRET-KEY']
c
n
c
current_user.books = a
current_user.books
current_user.books.filter {|b| b.id != user_input.book_id}
a
a = current_user.books.filter {|b| b.id != user_input.book_id}
current_user.books
user_input.book_id
user_input
user_input_params
c
books
n
c
n
c
books
n
c
books
n
c
User.find(9).books
Book.find_by(user_id: 9)
c
current_user.books
Book.find_by(user_id: 10)
Book.where(user_id: current_user.id)
current_user
current_user.books
b = Book.where(user: current_user)
Book.where(user: current_user)
Book.first.users
Book.where(user_id: 9)
Book.where(user_id: current_user.id)
UserBook.find_by(user_id: 9)
c
User.first.books
g.user_books
g.books
g = User.find(9)
user_input
c
current_user.books
current_user.user_books
current_user.books
current_user
current_user.books
UserBook.all
UserBook.where(user_id: 9, book_id: 189)
UserBook.where(user_id: 9)
UserBook.last
User_Books.last
UserBooks.last
c
user_input
n
c
n
c
user_input_params
user_input_params[:user_input_tags_attributes]
n
user_input_params
n
c
n
c
user_input_params[:review_attributes]
c
user_input_params[:review_attributes]
c
user_input_params[:review_attributes]
user_input.review
user_input.review.update!(user_input_params[:review_attributes])
user_input.review
n
user_input.ages
n
user_input.categories
user_inputs.categories
n
c
n
c
user_input.ages
n
c
n
c
n
c
user_input.categories
n
c
n
user_input.categories
user_input_params[:user_input_categories_attributes]
c
n
c
user_input_params[:user_input_categories_attributes]
n
c
cc
c
user_input_params[:user_input_categories_attributes]
c
user_input_params[:user_input_categories_attributes]
c
user_input_params[:user_input_categories_attributes]
c
user_input_params[:user_input_categories_attributes]
n
c
user_input_params[:user_input_categories_attributes]
user_input.categories
n
c
user_input_params[:user_input_categories_attributes]
user_input.categories
c
user_input.categories
user_input.categories = []
user_input_params[:user_input_categories_attributes]
n
c
user_input_params[:user_input_categories_attributes]
user_input.categories
n
c
user_input.categories
user_input
input
n
user_input_params
c
params
user_input_params[:user_input_tags_attributes]
n
c
user_input_params[:user_input_tags_attributes]
n
c
