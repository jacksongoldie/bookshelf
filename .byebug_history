c
user_input.review.text
c
n
c
n
user_input.review.text?
user_input.review
c
n
c
user_input.review.text?
user_input.review
c
user_input.review
exit
user_input.review.text
user_input.review
user_input
q!
c
n
c
user_input.review
c
user_input.review
user_input
c
user_input.review
object
c
user_input.review.text
user_input.review?
user_input.review
user_input
x.review
x
x = object.user_inputs.find_by(user_id:9)
x = object.user_input
object.user_input
object
c
n
c
user_id
object
params
object.user_input
object
exit
object.ages
object
object.id
object.user_inputs
object.ages
object
oject.ages
object
exit
a
a = object.authors.each {|a| puts"#{a.name}"}
object.authors.each {|a| puts "#{a.name}"}
object.authors.each {|a| puts `#{a.name}`}
object.authors.each {|a| a.name}
object.authors.each {|a| a}
object.authors
object.authors.push(Author.first)
object.authors
c
n
array
n
exit
accepts_nested_attributes_for :ages
array.sum
array = object.user_inputs.map {|i| i.spice}
array = object.user_inputs[0].spice
array = object.user_inputs
array = object.user_inputs.map((i) => i.spice)
object.user_inputs.map((x) => x.spice)
object.user_inputs
object
c
params[:id]
c
request
request.jwt
request
jwt
user
signed_in?
c
n
c
current_user
JWT.methods
JWT
request
c
response.status
response
super
n
payload
n
signed_in?
n
c
user
@current_user
c
@current_user
c
signed_in?
c
user.id
authenticate_user!
authenticate_user
@current_user
super
user
signed_in?
c
n
exit
c
super.merge
super
warden
request.headers['Authorization'].split(' ')[1].remove('"')
jwt_payload
user_id
user
token
jwt
methods
token
user
session
sessions[:id]
c
request
JWT.decode(request.headers['Authorization'].split(' ')[1])
JWT.decode(request.headers['Authorization'].split(' ')[1]
        #                          Rails.application.credentials.devise[:jwt_secret_key]).first
JWT.decode(request.headers['Authorization'].split(' ')[1],
JWT
JWT.decode(request.headers['Authorization'].split(' ')[1].remove('"'), Rails.application.secrets.secret_key_base).first
get_user_from_token
jwt_payload
@current_user_id
c
n
c
n
c
n
c
User.find(params[:id])
n
c
n
c
n
m
n
all
rails
super
params
token
User.find(@current_user_id)
@current_user
n
c
exit
end
token ? "y" : "n"
token === true
token?
token.to_json
token
render json: token
n
user.valid_password?(params[:password])
user.valid_password?
n
user
c
n
token
n
user
c
sign_in_params
params
User.find_by_email("example@example.com")
user
c
params
payload
n
c
n
c
current_user
resource
_opts
resource.persisted?
resource
register_success
resource
params
n
c
params
q
c
params[:password]
params[:id]
c
params
params[:id]
params=[:id]
params
c
n
params[:password]
params
self
email
exit
@user.errors
@user
user
self
errors
q!
request.headers['Authorization']
request.headers('Authorization')
request.headers
request
JWT
c
n
c
session
c
session
c
n
c
current_user
c
current_user
c
